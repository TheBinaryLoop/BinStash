// <auto-generated />
using System;
using BinStash.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BinStash.Infrastructure.Data.Migrations
{
    [DbContext(typeof(BinStashDbContext))]
    [Migration("20250730193659_AddCustomPropertiesColumnToRelease")]
    partial class AddCustomPropertiesColumnToRelease
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BinStash.Core.Entities.Chunk", b =>
                {
                    b.Property<string>("Checksum")
                        .HasColumnType("char(64)");

                    b.Property<Guid>("ChunkStoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.HasKey("Checksum", "ChunkStoreId");

                    b.ToTable("Chunks", (string)null);
                });

            modelBuilder.Entity("BinStash.Core.Entities.ChunkStore", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("LocalPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ChunkStores", (string)null);
                });

            modelBuilder.Entity("BinStash.Core.Entities.Release", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomProperties")
                        .HasColumnType("jsonb");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("ReleaseDefinitionChecksum")
                        .IsRequired()
                        .HasColumnType("char(64)");

                    b.Property<Guid>("RepoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("RepoId");

                    b.ToTable("Releases", (string)null);
                });

            modelBuilder.Entity("BinStash.Core.Entities.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("ChunkStoreId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ChunkStoreId");

                    b.ToTable("Repositories", (string)null);
                });

            modelBuilder.Entity("BinStash.Core.Entities.ChunkStore", b =>
                {
                    b.OwnsOne("BinStash.Core.Entities.ChunkerOptions", "ChunkerOptions", b1 =>
                        {
                            b1.Property<Guid>("ChunkStoreId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("AvgChunkSize")
                                .HasColumnType("integer")
                                .HasColumnName("Chunker_AvgChunkSize");

                            b1.Property<int?>("BoundaryCheckBytes")
                                .HasColumnType("integer")
                                .HasColumnName("Chunker_BoundaryCheckBytes");

                            b1.Property<int?>("MaxChunkSize")
                                .HasColumnType("integer")
                                .HasColumnName("Chunker_MaxChunkSize");

                            b1.Property<int?>("MinChunkSize")
                                .HasColumnType("integer")
                                .HasColumnName("Chunker_MinChunkSize");

                            b1.Property<int?>("ShiftCount")
                                .HasColumnType("integer")
                                .HasColumnName("Chunker_ShiftCount");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("Chunker_Type");

                            b1.HasKey("ChunkStoreId");

                            b1.ToTable("ChunkStores");

                            b1.WithOwner()
                                .HasForeignKey("ChunkStoreId");
                        });

                    b.Navigation("ChunkerOptions")
                        .IsRequired();
                });

            modelBuilder.Entity("BinStash.Core.Entities.Release", b =>
                {
                    b.HasOne("BinStash.Core.Entities.Repository", "Repository")
                        .WithMany("Releases")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("BinStash.Core.Entities.Repository", b =>
                {
                    b.HasOne("BinStash.Core.Entities.ChunkStore", "ChunkStore")
                        .WithMany()
                        .HasForeignKey("ChunkStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChunkStore");
                });

            modelBuilder.Entity("BinStash.Core.Entities.Repository", b =>
                {
                    b.Navigation("Releases");
                });
#pragma warning restore 612, 618
        }
    }
}
